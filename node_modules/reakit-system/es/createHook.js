import 'react';
import './SystemContext.js';
import './useToken.js';
import { useProps } from './useProps.js';
import './_rollupPluginBabelHelpers-0f0865de.js';
import { useOptions } from './useOptions.js';
import { isObject } from 'reakit-utils/isObject';
import { toArray } from 'reakit-utils/toArray';

function deepEqual(objA, objB, depth) {
  if (depth === void 0) {
    depth = 1;
  }

  if (objA === objB) return true;
  if (!objA || !objB) return false;
  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var length = aKeys.length;
  if (bKeys.length !== length) return false;

  for (var _i = 0, _aKeys = aKeys; _i < _aKeys.length; _i++) {
    var key = _aKeys[_i];

    if (objA[key] !== objB[key]) {
      if (!depth || !isObject(objA[key]) || !isObject(objB[key]) || !deepEqual(objA[key], objB[key], depth - 1)) {
        return false;
      }
    }
  }

  return true;
}

function createHook(options) {
  var composedHooks = toArray(options.compose);

  var useHook = function useHook(hookOptions, htmlProps) {
    if (hookOptions === void 0) {
      hookOptions = {};
    }

    if (htmlProps === void 0) {
      htmlProps = {};
    }

    if (options.useOptions) {
      hookOptions = options.useOptions(hookOptions, htmlProps);
    }

    hookOptions = useOptions(options.name, hookOptions, htmlProps);

    if (options.useProps) {
      htmlProps = options.useProps(hookOptions, htmlProps);
    }

    htmlProps = useProps(options.name, hookOptions, htmlProps);

    if (options.useCompose) {
      htmlProps = options.useCompose(hookOptions, htmlProps);
    } else if (options.compose) {
      composedHooks.forEach(function (hook) {
        htmlProps = hook(hookOptions, htmlProps);
      });
    }

    return htmlProps;
  };

  if (process.env.NODE_ENV !== "production") {
    Object.defineProperty(useHook, "name", {
      value: options.name
    });
  }

  useHook.__keys = [].concat(composedHooks.reduce(function (allKeys, hook) {
    return [].concat(allKeys, hook.__keys || []);
  }, []), options.useState ? options.useState.__keys : [], options.keys || []);
  var hasPropsAreEqual = Boolean(options.propsAreEqual || composedHooks.find(function (hook) {
    return Boolean(hook.__propsAreEqual);
  }));

  if (hasPropsAreEqual) {
    useHook.__propsAreEqual = function (prev, next) {
      var result = options.propsAreEqual && options.propsAreEqual(prev, next);

      if (result != null) {
        return result;
      }

      for (var _iterator = composedHooks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var hook = _ref;
        var propsAreEqual = hook.__propsAreEqual;
        var hookResult = propsAreEqual && propsAreEqual(prev, next);

        if (hookResult != null) {
          return hookResult;
        }
      }

      return deepEqual(prev, next);
    };
  }

  return useHook;
}

export { createHook };
